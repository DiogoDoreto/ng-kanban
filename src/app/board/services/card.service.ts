import { Injectable } from '@angular/core';
import { select, Store } from '@ngrx/store';
import { merge, Observable, of } from 'rxjs';
import {
  delay,
  filter,
  ignoreElements,
  share,
  switchMap,
  tap,
} from 'rxjs/operators';
import { getCard, getCards, State } from '../reducers';
import { AddCard, LoadCards, UpdateTitle } from '../actions';
import { Card } from '../card.model';

const CARDS: Card[] = [
  { id: 1, title: 'Learn Angular' },
  { id: 2, title: 'Buy milk' },
  { id: 3, title: 'Server Side Rendering' },
];

// TODO this will be generated by the API
let nextId = 4;

@Injectable()
export class CardService {
  constructor(private store: Store<State>) {}

  requestCards$ = this.store.pipe(
    select(getCards),
    filter(cards => !cards || !cards.length),
    switchMap(() => of(CARDS)), // TODO replace by API call
    delay(500), // simulate network
    tap(cards => this.store.dispatch(new LoadCards(cards))),
    share(),
  );

  getCard(id: number): Observable<Card> {
    return merge(
      this.requestCards$.pipe(ignoreElements()),
      this.store.pipe(select(getCard, id)),
    );
  }

  add(title: string): Observable<Card> {
    const newCard: Card = {
      id: nextId++,
      title,
    };
    this.store.dispatch(new AddCard(newCard));
    return of(newCard);
  }

  updateTitle(id: number, title: string) {
    this.store.dispatch(new UpdateTitle({ id, title }));
  }
}
