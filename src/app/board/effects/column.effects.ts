import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { select, Store } from '@ngrx/store';
import { map, withLatestFrom } from 'rxjs/operators';
import * as fromApp from '../../reducers';
import * as boardActions from '../actions';
import { Column } from '../column.model';

// TODO this will be generated by the API
let nextId = 5;

@Injectable()
export class ColumnEffects {
  constructor(private actions$: Actions, private store: Store<fromApp.State>) {}

  @Effect()
  add$ = this.actions$.pipe(
    ofType<boardActions.AddColumn>(boardActions.ColumnActionTypes.AddColumn),
    withLatestFrom(
      this.store.pipe(select(fromApp.getColumns)),
      this.store.pipe(select(fromApp.getRouterParams)),
    ),
    map(([action, columns, params]) => ({
      id: nextId++,
      title: action.payload.title,
      cards: [],
      position: columns.length,
      boardId: Number(params.id),
    })),
    map((col: Column) => new boardActions.AddColumnSuccess(col)),
  );
}
